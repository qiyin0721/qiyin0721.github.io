{"pages":[],"posts":[{"title":"Linux 文本处理之awk","text":"awk是一种处理文本文件的语言，用于Linux下对文本和数据进行处理。数据可以是标准输入、一个或多个文件、其他命令的输出。方式为逐行扫描，从第一行到最后一行，寻找到匹配特定模式的行进行操作。 命令格式和常用选项命令格式awk [options] ‘/pattern/{action}’ input-fileawk [options] -f myscript.awk input-file 常用选项 -F 指定输入文件分隔符 -f 从脚本文件中读取awk命令 -v 赋值一个用户定义变量 模式awk脚本是由模式和操作组成，模式可以是以下的几种： 正则表达式 关系表达式 模式匹配表达式 BEGIN END awk 'BEGIN {Fs = &quot;:&quot;; print &quot;----header----&quot;}\\ /mail/{print $1}\\ #搜索包含关键字mail的行，并打印第一个字段 END{print “----footer----”}' /etc/passwd 打印命令awk ‘{print}’ employee.txt 传递变量 “ $字段序号 ” 作为print的参数awk -F ',' '{print $2}' employee.txt 指定 ， 为分隔符模式匹配awk -F ',' '/Manager/{print $2,$3}' employee.txt awk 内置变量 FS - 输入字段分隔符 在BEGIN区域使用 OFS 输出字符分隔符 两种方式： awk -F ',' '{print $2,&quot;:&quot;,$3}' employee.txt awk -F ',' 'BEGIN{OFS=&quot;:&quot;}{print $2,&quot;:&quot;,$3}' employee.txtRS 记录分隔符ORS 输出记录分隔符NR 记录序号 条数​ 开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，因此默认的就是读取的数据行数 Number of RecordNF 字段总数 Number of Field FILENAME 当前处理的文件名FNR 文件中的NR 变量操作符变量一元操作符 + 取正(返回数字本身) - 取反 ++ 自增 –自减算术操作符awk 'NR % 2 == 0' filename 取偶数字符串操作符 “ ”赋值操作符比较操作符 &amp;&amp; 且 ||或正则表达式操作符 ~ 匹配 !~ 不匹配 分支和循环if 结构​ if (conditional-expression)​ action多条 ；分割awk '{if (NR % 2 ==0) ORS='\\n';else ORS = ',';print}' filename while 循环​ while (condition)​ Actions​​do - while 循环进入控制判断的循环结构 for循环for (initialization;condition;increment/decrement)for循环一开始就执行 init 然后检查 con 如果为True,执行 action 然后 incre or decre printfprintf(format, value1, value2, …, valuen)可以灵活简单以你期望的格式输出结果\\n 换行 \\t制表符 \\v垂直制表符 \\b退格 \\r回车符 \\f换页 格式化字符s 字符串c 单个字符串d 数值e 指数f 浮点数g 根据值决定使用e或f中较短的输出o 八进制x 十六进制% 百分号 打印指定宽度(左对齐)awk 'BEGIN {printf &quot;%6s\\n&quot;, &quot;Good Boy!&quot;}' 内置函数内置函数int(n) 整数log(n) 返回给定参数的自然对数sqrt() 正平方根三角函数 sin() cos() atan2(m,n) 常用字符串函数 index 函数 length 函数 s 的长度 split 函数 substr 函数 substr (input-string,location,length) 子串 开始位置 总长度对指定的正则表达式进行替换 tolower(s) 转成小写 toupper(s) 转成大写 sub(f,r,s) 根据正则f 从r中提取数据到s 用户自定义函数function fn-name(parameters){​ function-body} fn-name 函数名 parameter 参数 关联数组实现类似操作cat filename cut -f '2' | sort | uniq -c | sort这样的操作 awk '$1 ~ /Chr1/{feature[$3] += 1};END {for (k in feature) print k &quot;\\t&quot; featrue[k]}' filename bioawk识别GFF/GTF 、FASTA/FASTQ、BED","link":"/2019/01/14/Linux4/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2018/12/29/hello-world/"},{"title":"Linux基础练习题","text":"选择题 使用man查看帮助文档时，使用哪个键可以退出文档？ （ C ） A. Z B. TAB C.q D. Enter E. 空格 以下哪一项是相对目录引用? （ C ） A. /home/student B. /etc C. .. D. ~ pwd可以显示如下的哪一项？( AB ) A. home/student B. /etc C. .. D. ~ 执行 cd ~ 命令后在执行pwd, 最可能的结果是什么？ ( B ) A. /home/student B. /etc C. .. D. ~ pwd显示的是绝对路径 文件names.conf是一个系统配置文件，根据Linux系统目录存放规则，它位于( B ) A. /tmp B. /etc C. /bin D. /sbin /root目录很重要是因为 ( A ) A. 它是Linux文件系统的根目录 B. 它是超级用户的主目录 C. 它可被缩写成~ D. 任何用户都不能阅读它的内容 /bin和/usr/bin 含有相同的文件( B ) A. 是 B. 否 将文件file1.txt复制到file2.txt, 你可以使用( B ) A. cp file1.txt &gt; file2.txt B. cp file1.txt file2.txt C. dupe file1.txt file2.txt D. mv file1.txt file2.txt 将file1 从当前目录中删除，可以使用( A ) A. rm file1 B. erase file1 C. del file1 D. cut file1 如下哪个命令可以递归列出/usr 下的内容( D ) A. lsdir /usr B. ls –recur /usr C. ls -r /usr D. ls -R /usr 以下哪个命令可以创建空文件夹( C ) A. nd B. nd C. mkdir D. newdir E. touch -d 以下哪个命令可以复制目录ABC及除ABC/EFG/HIJ之外的子目录到archive( E ) A. cp -x HIJ ABC archive B. cp -d 2 ABC archive C. cp -x HIJ ABC archive/ABC D. cp -d2 ABC archive/ABC E. 以上都错 cp -r ABC/!(HIJ*) archive/ABC 为什么有些人更偏爱使用rmdir命令，而不是rm -r（A） A. 保证目录中没被注意到的文件不会被无意中删除 B. 因为rmdir命令不需要命令行选项就可以递归执行 C. rmdir命令自动为它删除的文件备份 D. A和B ls /etc/*.??的输出文件可能包含以下哪个文件? (BDE) A. /ect/issue.net B. /etc/mail.rc C. /etc/php.ini D. /etc/huh.?? E. /etc/xpdfrc.ja F. /ect/gss-1.0 * 将与零个或多个字符匹配 ？与任何单个字符匹配 下面哪个find命令的选项可以找出链接数大于2的普通文件? ( A ) A. -type f -links +2 B. -links +1 C. -type o -links +1 D. -type f -links +1 下面哪个或哪些命令能列出最近创建的文件，其文件名包含”coffee”字符串(C) A. slocate coffee B. find . -name coffee C. find . -name “*coffee*“ D. ls -R *coffee* gzip工具默认生成的压缩文件默认文件扩展名是? (B) A. .Z B. .gz C. .bz2 D. .tar 哪些命令可用于解压缩.gz文件(BC) A. uncompress B. gunzip C. gzip -d D. bunzip2 简答题 Windows如何登陆到远程服务器，有哪些可用工具？ 答：Mac终端、Linux使用SSH命令。 Windows平台上一般用Xshell或Putty 打开终端之后，如何查看自己当前所在路径，如何查看当前目录下的内容 123456$ pwd/Users/qiyinn$ lsAnacondaProjects Desktop Library Pictures R-Studio anaconda3 playgroundApplications Documents Movies PublicCreative Cloud Files Downloads Music PycharmProjects Zotero matplotlib Linux里的隐藏文件有什么特征，如何查看所有的隐藏文件？ 答：以“.”开头；输入“ls -a”命令可查看。 在Windows中，我们通过鼠标打开文件夹，切换目录，那在Linux如何切换目录？请尝试切换到/usr/bin目录下 12qiyindeMacBook-Pro-8:~ qiyin$ cd /usr/binqiyindeMacBook-Pro-8:bin qiyin$ 相对路径和绝对路径有何区别, 上一题的/usr/bin是相对路径还是绝对路径？答：绝对路径是以根目录为标准，相对路径是以当前路径为标准。上一题是绝对路径。 一般而言，Linux系统哪些文件夹里存放着可执行的命令？ 答：“/usr/loca/bin”、“/usr/bin”目录下存放可执行文件。 Linux有五个文件和目录操作最常使用命令，cp, mv, mkdir, rm, ln，请问这个命令的作用分别是什么？ 答：cp 复制文件和目录; mv 移动文件和目录；mkdir 新建文件和目录；rm 删除文件和目录；ln 添加链接(硬链接和软链接)。 请用一行命令创建出如下的文件夹【参考资料：从PATH说起的shell命令行替换】 12345678910111213141516test/├── a│ ├── e│ │ └── f│ ├── g│ └── h├── b│ ├── e│ │ └── f│ ├── g│ └── h└── c ├── e │ └── f ├── g └── h 答：mkdir&nbsp; -p &nbsp;test/{a,b,c}/{e,g,h} &nbsp;&nbsp;test/{a,b,c}/e/f 为什么无法直接用rmdir test删除test文件夹，应该采取什么样的策略才能删除该文件夹？ 答：显示“ Directory not empty”。我输入“rm &nbsp;-rf &nbsp;test”删除了该文件夹。死亡命令还是谨慎使用，尽量先删除里面的文件，再用rmdir。 为什么你无法在/下创建目录？ 答：“/”代表根目录。（在linux的目录结构中） ln可以进行文件的链接，请问用它创建的软连接和硬链接有何区别, 这行命令能执行吗ln /usr/bin ~/， 如何不能执行，应该如何调整？ 答：他们的文件权限不同，硬链接为“-rw-r–r–”,软链接为“lrwxr-xr-x”;软链接保存的是绝对路径。 “ln /usr/bin ~/“这个命令不能执行，硬链接不可以关联目录，只能是文件。“ln -s /usr/bin ~/”添加软链接。 Linux中的命令有四种形式，而type可以用来判断命令的类型，请问mv,cd,quote,ls分别是什么类型的命令。 12345678910$ type mvmv is /bin/mv #可执行程序$ type cdcd is a shell builtin #shell内部命令$ type quote-bash: type: quote: not found$ type lsls is hashed (/bin/ls) #可执行程序$ type quotaquota is /usr/bin/quota #可执行程序 学习Linux命令行时其实就是不断学习、熟悉命令的过程。现在有一个命令为fold,请借助man和whatis的帮助学习这个命令的用法，并借助该命令将abc”拆分成一行一个字符。 答：建立一个内容为abc的文件为test.txt,输入“fold -w 1 test.txt” 如何查看当前的环境变量，PATH环境变量的用途是什么，如何查看PATH变量里包含的内容？ 答：输入”printenv | less”，PATH环境变量存储目录列表，“echo $PATH”可以查看包含的内容。（冒号隔开）知识点 返回上一级目录cd ..或者上上一级cd ../../是比较常用的操作，请学习alias的这个命令，通过修改配置文件~/.bashrc，用..和...进行替代。（初学者用nano文本编辑器编辑文本，但是推荐去学习vim) 1234567$ type ..-bash: type: ..: not found$ alias name='..'#创建命令$ alias ..='cd ..'#命令内容$ ..$ type .... is aliased to `cd ..' #同理创建‘...’命令 如何查找/etc下面的所有以conf结尾的文件 1$ find \"*.conf” /etc 请将第8题的文件夹进行打包成一个”test.tar.gz”文件, 创建完成后删除test的所有内容 答：输入”tar -zcvf test 实战题我们要开始一个新的RNA-seq数据分析项目，现在请在你的家目录下创建出如下的文件夹用于开展项目 12345rna-seq-project/├── analysis│ └── data├── results└── scripts 由于后续会一直在这个文件夹操作，所以你想着要不创建一个环境变量，叫做WKDIR， 这样就可以用cd $WKDIR的方式快速跳转。 每次都用cd $WKDIR其实也很恼人，你觉得有必要创建一个命令”gowork”来替代cd $WKDIR。 12345678910$ exportWKDIR=/home/zlc/data/xu/project/RNA-seq$ echo $WKDIR/home/zlc/data/xu/project/RNA-seq$ cd $WKDIR$ alias name=\"gowork\"$ alias \"gowork\"=\"cd $WKDIR\"$ gowork$ cd ..$ gowork 由于RNA-seq数据分析时需要安装一系列软件，为了便于管理，请在家目录下创建一个src文件夹用于存放下载的安装，新建opt/biosoft用于存放下载的生信软件。 为了从NCBI上下载高通量测序数据，需要安装SRA Toolkit, 请在https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software中根据所用系统，用wget下载安装包”sratoolkit.2.x.x-ubuntu64.tar.gz”，存放在src文件下（x.x.代表不同的版本号） 不难发现”sratoolkit.2.x.x-ubuntu64.tar.gz”是一个压缩包，请将其解压缩并将其移动到~/opt/biosoft下。然后将其二进制文件所在路径添加到环境变量PATH中。 提高篇判断Linux的熟练度有一个不靠谱的标准：就是看他对一些快捷键的熟悉情况。当你记住一些快捷键之后，你使用终端的效率会大大提高。 请先在终端上按照下图输入字符，后续的操作不能使用鼠标，并作答需要用到何种快捷键（允许查资料） 注意，xshell的”元键”不是ALT而是ESC, 所以你需要按下和释放ESC键才能获得ALT键一样的效果。 请将光标移动上述字符串的最左边，然后再回到最右边 请将光标向前移动一个单词到h上，并插入一个字符”y”, 使得结果变为”abc efge yhij” 有些终端的”退格键”失灵了（自定百度退格键是哪个)，应该用哪个快捷键删除刚才的”y” 当然即便”退格键”没有失灵，你想删除”hij”也需要敲三次退格键，使用哪个快捷键可以删除一整个单词 用作练习的字符串并没有任何意义，所以请使用快捷键清空这一行 上面这些快捷键一开始的时候你根本记不住，这没有关系，毕竟我们需要反复练习才能掌握足够多的知识。记忆这些命令在开始的时候会非常痛苦，但当你掌握之后你会得到飞一般的效率提高。在传统的程序员眼里，用鼠标的都是异类，用键盘才是王道。","link":"/2019/01/14/Linux3/"},{"title":"建立个人博客 (Mac OS)","text":"作为一个记性不好，自学programming的菜鸟，学习过程中经常会查询一些操作，如果不及时记录和理解，下次遇到问题还要花时间搜索。虽然现在有很多平台可以作为自己的学习笔记输出地，比如豆瓣、简书、微信订阅号等等，但是鉴于想满足自己即希望被看到又不想被看到的矛盾心理，决定学习搭建一个自己的窝。 网上可以搜索到很多Wordpress的教程，不过我只是想搭建一个静态博客网站，一开始选择了Hugo，在修改配置文件后一直会有问题，耗了很长时间没有解决。所以换了hexo，静态页面搭建流程都是差不多的，hexo有中文文档和视频，也遇到了一些bug，所以记录一下！ 安装环境配置 安装 Node.js 官网 安装Homebrew 官网终端输入 brew install git安装Git 安装hexo 终端执行以下命令12345678cd 你的hexo存储路径sudo npm install -g hexo# 初始化hexo init# 生成一个站点hexo g# 本地查看hexo s 此时打开 http://localhost:4000/会看到一个初始博客 github部署 注册Github账号官网 配置Github打开终端 12345678# 一行一行的输入$ git config --global user.name &quot;用户名&quot;$ git config --global user.email &quot;邮箱&quot;$ ssh-keygen -t rsa -C &quot;注册邮箱&quot;# 输入完以后你会看到key地址 vim打开cd &quot;key地址&quot;vim id_rsa.pub# 复制里面的内容 进入github主页，右上角头像，点击setting，进入SSH and GPG keys，右上角new SSH key粘贴刚才的内容进去保存 验证 终端输入 1$ ssh -T git@github.com 如果操作正确，会看到以下提示，就可以啦！ 1Hi 你的用户名， You&apos;ve successfully authenticated, but GitHub does not provide shell access. 创建博客需要的仓库 进入主页，点击New repository输入username.github.io这里的一定要是你的username，创建即可。 hexo初步配置主题下载 进入博客所在目录，下载主题，我选择的主题为icarus 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 将全局配置文件的theme属性改为: theme: icarus 修改局部配置文件参考中文文档 github部署 安装Git部署器 1npm install hexo-deployer-git -save 修改配置文件打开 _config.yml 文件，在末尾添加以下命令： 1234deploy: type: git repository: https://github.com/username/username.github.io.git branch: master 部署利用hexo指令 hexo d 发布到github，在github仓库中的setting下点击网站就可以看到部署的静态web网站了。 第一篇文章 新建文章 12hexo new &quot;test&quot;#在目录下可以看到一个test.md的文档 发布文章 12hexo cleanhexo d -g 后续还有自动化部署、图片格式存储等等配置，慢慢完善呐！","link":"/2018/12/31/test/"},{"title":"linux学习笔记（二）","text":"本笔记的学习资源：The Linux Command Line 使用命令命令格式：命令 选项 参数可执行程序的路径、修正命令的执行方式（短选项：-一个字符；长选项：–字母或单词）、命令的作用对象 什么是命令？1、命令是一个可执行程序。2、命令是一个内建于shell自身的，bash支持若干命令，内部叫做shell内部命令（builttins）。例如，cd命令，就是一个shell内部命令。3、命令是一个shell函数，就是一个小规模的shell脚本，它们混合到环境变量中。4、是一个命令别名。 type - 显示命令的类型123456qiyindeMacBook-Pro:playground qiyin$ type typetype is a shell builtinqiyindeMacBook-Pro:playground qiyin$ type commandcommand is a shell builtinqiyindeMacBook-Pro:playground qiyin$ type lsls is hashed (/bin/ls) “type”、”command”、“ls”是要检测的命令名。 which - 显示一个可执行程序的位置在大型服务器上，会出现不只安装了可执行程序的一个版本。为了确定所给定的执行程序的准确位置，使用“which”命令。不包括内建命令和命令别名。 help - 得到shell内建命令的帮助文档输入“help cd”，出现在命令语法说明中的方括号，表示可选的项目。一个竖杠字符表示互斥选项。所以cd命令可能有一个“-L”选项或者“-P”选项。 1234qiyindeMacBook-Pro:~ qiyin$ help cdcd: cd [-L|-P] [dir] Change the current directory to DIR. The variable $HOME is the default DIR. ... –help - 显示用法消息，显示命令所支持的语法和选项说明。 123qiyindeMacBook-Pro:~ qiyin$ mkdir --helpmkdir: illegal option -- -usage: mkdir [-pv] [-m mode] directory ... man - 显示程序手册页man命令是Linux下的帮助指令，通过man指令可以查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。 apropos - 显示适当的命令apropos命令在一些特定的包含系统命令的简短描述的数据库文件里查找关键字，然后把结果送到标准输出。 如果你不知道完成某个特定任务所需要命令的名称，可以使用一个关键字通过Linux apropos实用程序来搜索它。该实用程序可以搜索关键字并且显示所有包含匹配项的man页面的简短描述。另外，使用man实用程序和-k（关键字）选项，可以得到和用Linux apropos实用程序相同的结果（实际上是相同的命令） whatis - 显示非常简洁的命令说明whatis命令是用于查询一个命令执行什么功能，并将查询结果打印到终端上。 whatis命令等同于使用man -f命令。 在Wikipedia上关于手册页的解释： A man page (short for manual page) is a form of software documentation usually found on a Unix or Unix-like operating system. 重定向计算机五大部件：CPU（运算器、控制器）、RAM(存储器)、输入设备/输出设备程序：由指令和数据组成I/O设备：硬盘、键盘… “I/O”代表 input/output通过I/O重定向（I/O redirection）这个工具，你可以重定向命令的输入输出，命令的输入来自文件，而输出也存到文件，也可以把多个命令连接起来组成一个强大的命令管道。 cat － 连接文件sort － 排序文本行uniq － 报道或省略重复行grep － 打印匹配行wc － 打印文件中换行符，字，和字节个数head － 输出文件第一部分tail － 输出文件最后一部分tee － 从标准输入读取数据，并同时写到标准输出和文件 标准输入、输出和错误输出：1、程序运行结果，程序要完成的而功能；2、得到状态和错误信息，告诉程序进展。标准输入（stdin)是指令数据的输入，默认是键盘；标准输出（stdout）是指令执行成功返回的结果，默认由屏幕显示；标准错误输出（stderr）是指令执行失败返回的错误信息，默认是屏幕。 重定向标准输出 输出重定向到一个文件或设备，覆盖原来的文件 这部分在实际数据中练习。 键盘快捷键操作clear — 清空屏幕 history — 显示历史列表内容 移动光标 按键 行动 Ctrl-a 移动光标到行首。 Ctrl-e 移动光标到行尾。 Ctrl-f 光标前移一个字符；和右箭头作用一样。 Ctrl-b 光标后移一个字符；和左箭头作用一样。 Alt-f 光标前移一个字。 Alt-b 光标后移一个字。 Ctrl-l 清空屏幕，移动光标到左上角。clear 命令完成同样的工作。 修改文本 按键 行动 Ctrl-d 删除光标位置的字符。 Ctrl-t 光标位置的字符和光标前面的字符互换位置。 Alt-t 光标位置的字和其前面的字互换位置。 Alt-l 把从光标位置到字尾的字符转换成小写字母。 Alt-u 把从光标位置到字尾的字符转换成大写字母。 剪切和粘贴文本 按键 行动 Ctrl-k 剪切从光标位置到行尾的文本。 Ctrl-u 剪切从光标位置到行首的文本。 Alt-d 剪切从光标位置到词尾的文本。 Alt-Backspace 剪切从光标位置到词头的文本。如果光标在一个单词的开头，剪切前一个单词。 Ctrl-y 把剪切环中的文本粘贴到光标位置。 自动补全Tab 补全信息","link":"/2019/01/14/linux2/"},{"title":"linux学习笔记（一）","text":"本笔记的学习资源：The Linux Command Line 为什么使用命令行？大多数计算机用户只熟悉图形用户界面（GUI：graphical user interface），并且产品供应商和此领域的学者会灌输给永华这样的思想，命令行界面（CLI：command line interface）是过去使用的一种很恐怖的东西。 一个好的命令行界面，是用来和计算机进行交流沟通的非常有效的方式，“图形用户界面让简单的任务更容易完成，而命令行界面使完成复杂的任务成为可能”。 生物信息领域，能高效处理大量的数据。生物信息的软件大多为开源软件，LINUX版本。 它是一个多用户的操作系统，充分利用购置的硬件资源和软件资源。 什么是shell？shell就是一个程序，它接受从键盘输入的命令，然后把命令传递给操作系统去执行。shell是用于访问操作系统服务的用户界面。bash(Bourne Again SHell)，最初Unix上有Steve Bourne写成shell程序sh的增强版。 终端仿真器 当使用图形用户界面时，我们需要另一个和shell交互的叫做终端仿真器的程序。 在Mac里就是Terminal 第一个按键 1qiyindeMacBook-Pro:~ qiyin$ 这叫做shell提示符，通常包括你的用户名和主机名，紧接着是当前工作目录和一个美元符号。输入6789，这个命令没有意义，shell会提示错误信息。 命令历史 123iyindeMacBook-Pro:~ qiyin$ 6789-bash: 6789: command not foundqiyindeMacBook-Pro:~ qiyin$ 6789 如果按下上箭头，会看到刚才输入的命令，这就叫做命令历史。一般保存最后输入的500个命令，按下下箭头按键，先前输入的命令消失。 输入简单的命令行 12345678910qiyindeMacBook-Pro:~ qiyin$ date2018年 1月19日 星期五 10时15分22秒 CSTqiyindeMacBook-Pro:~ qiyin$ cal 一月 2018日 一 二 三 四 五 六 1 2 3 4 5 6 7 8 9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31 结束终端会话输入exit命令来终止一个终端会话。 文件系统中的跳转 pwd-print name of current working directory (打印当前工作目录名)cd-change direttory（更改目录）ls-list directory contents（列出目录内容） 理解文件系统树所有文件组成一棵树型目录，这个目录树可能包含文件和其他目录。文件系统中的第一级目录称为根目录，根目录包含文件和子目录，子目录包含更多的文件和子目录，以此类推。 12qiyindeMacBook-Pro:~ qiyin$ pwd/Users/qiyin 这是我的家目录，家目录是唯一允许用户对文件进行写入的地方。 绝对路径 绝对路径开始于根目录，紧跟着目录树的一个个分支，一直到达所期望的目录或文件。 相对路径相对路径开始于工作目录。 特殊的符号表示相对位置“.”指的是工作目录“..”指的是工作目录和父目录 绝对 相对 from /Users/qiyin to /Users cd /Users cd .. from /Users to /Users/qiyin cd /Users/qiyin cd ./qiyin 123456789101112131415qiyindeMacBook-Pro:~ qiyin$qiyindeMacBook-Pro:~ qiyin$ pwd/Users/qiyinqiyindeMacBook-Pro:~ qiyin$ cd /UsersqiyindeMacBook-Pro:Users qiyin$ pwd/UsersqiyindeMacBook-Pro:Users qiyin$ cd /Users/qiyinqiyindeMacBook-Pro:~ qiyin$ pwd/Users/qiyinqiyindeMacBook-Pro:~ qiyin$ cd ..qiyindeMacBook-Pro:Users qiyin$ pwd/UsersqiyindeMacBook-Pro:Users qiyin$ cd ./qiyinqiyindeMacBook-Pro:~ qiyin$ pwd/Users/qiyin tip:”./“可以省略 ls乐趣 通过ls，我们可以知道目录的内容，以及各种各样重要文件和目录的属性。 选项和参数命令名经常会带有一个或多个用来更正命令行为的选项，选项后面会带有一个或多个参数，这些参数是命令作用的对象。大多数命令使用的选项，是由一个中划线加上一个字符组成，例如“-l”. 确定文件类型用file命令来确定文件的类型，形式为“file filename” 浏览文件内容用less命令来浏览文本文件的程序，形式为“less filename”例如，要查看一个定义了系统中全部用户身份的文件，输入“less /etc/passwd” 操作文件和目录 cp - 复制文件和目录mv - 移动/重命名文件和目录mkdir - 创建目录rm - 删除文件和目录ln - 创建硬链接和符号链接 通配符 shell频繁的使用文件名，shell提供了特殊字符来帮助你快速指定一组文件名。这些特殊字符叫做通配符，使用它允许你依据字符类型来选择文件名。 rm命令用到通配符，用ls命令来测试，看到要删除的文件列表。 硬链接与符号链接每个文件默认会有一个硬链接，这个硬链接给予文件名字。我们每创建一个硬链接，就为一个文件创建了一个额外的目录项。创建符号链接是为了克服硬链接的两个缺点：硬链接不能跨越物理设备，硬链接不能关联目录，只能是文件。符号链接生效，是通过创建一个特殊类型的文件，这个文件包含一个关联文件或目录的文本指针。 什么是链接？链接简单说是一种文件共享的方式，是POSIX中的概念，主流文件系统都支持链接文件。可以理解为windows中常见的快捷方式。 不是很明白？跳转大佬的科普文，看完后，再通过练习感受一下吧！ 练习1、创建目录playground 2、在playground的目录下创建dir1、dir2 3、复制文件 从/etc目录复制passwd到当前目录，使用cp命令，再执行ls命令看到文件 123456qiyindeMacBook-Pro:playground qiyin$ cp /etc/passwd .qiyindeMacBook-Pro:playground qiyin$ ls -ltotal 16drwxr-xr-x 2 qiyin staff 68 1 20 17:12 dir1drwxr-xr-x 3 qiyin staff 102 1 20 17:12 dir2-rw-r--r-- 1 qiyin staff 5925 1 22 23:08 passwd 注意 在命令末尾加个“ .”，就是将passwd复制快捷方式到当前目录 4、移动和重命名文件 将passwd重命名为fun，用到mv命令。将fun移动到dir1。再把fun从dir1移动到目录dir2,最后把fun文件带回到当前目录。 tips:这里移动和重命名都是mv命令，所以在同一个文件夹下面，就执行重命名。在不同文件夹，并且那个文件夹没有的文件，就是移动。 123456 qiyindeMacBook-Pro:playground qiyin$ mv passwd fun qiyindeMacBook-Pro:playground qiyin$ mv fun dir1qiyindeMacBook-Pro:playground qiyin$ mv dir1/fun dir2qiyindeMacBook-Pro:playground qiyin$ mv dir2/fun .qiyindeMacBook-Pro:playground qiyin$ lsdir1 dir2 fun 5、创建硬链接 “ls -li”可以展示文件索引节点的信息，第一字段中，fun和fun-hard共享一样的索引节点号，证实这两个文件是一样的文件。 123456789qiyindeMacBook-Pro:playground qiyin$ ln fun fun-hardqiyindeMacBook-Pro:playground qiyin$ ln fun dir1/fun-hardqiyindeMacBook-Pro:playground qiyin$ ln fun dir2/fun-hardqiyindeMacBook-Pro:playground qiyin$ ls -litotal 329860853 drwxr-xr-x 3 qiyin staff 102 1 22 23:45 dir19860854 drwxr-xr-x 3 qiyin staff 102 1 22 23:46 dir29990311 -rw-r--r-- 4 qiyin staff 5925 1 22 23:08 fun-hard9990311 -rw-r--r-- 4 qiyin staff 5925 1 22 23:08 fun 6、创建符号链接（软连接） 这里使用了相对路径，也可以使用绝对路径：“ln -s /Users/qiyin/playground/fun dir1/fun-sym”可以看到文件索引节点是不一样的。 1234567891011121314qiyindeMacBook-Pro:playground qiyin$ ln -s ../fun dir/fun-symqiyindeMacBook-Pro:playground qiyin$ ln -s ../fun dir1/fun-symqiyindeMacBook-Pro:playground qiyin$ ln -s ../fun dir2/fun-symqiyindeMacBook-Pro:playground qiyin$ ls -l dir1total 24-rw-r--r-- 4 qiyin staff 5925 1 22 23:08 fun-hardlrwxr-xr-x 1 qiyin staff 6 1 23 00:07 fun-sym -&gt; ../funqiyindeMacBook-Pro:playground qiyin$ ls -litotal 409860853 drwxr-xr-x 4 qiyin staff 136 1 23 00:07 dir19860854 drwxr-xr-x 4 qiyin staff 136 1 23 00:07 dir29990311 -rw-r--r-- 4 qiyin staff 5925 1 22 23:08 fun-hard9990311 -rw-r--r-- 4 qiyin staff 5925 1 22 23:08 fun9993619 lrwxr-xr-x 1 qiyin staff 3 1 23 00:05 fun-sym -&gt; fun","link":"/2019/01/14/linux/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[{"name":"生信","slug":"生信","link":"/categories/生信/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"}]}